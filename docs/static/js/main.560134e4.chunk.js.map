{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","Card","CardHeader","CardTitle","CardBody","id","data","datasets","label","fill","showLine","lineTension","borderColor","borderWidth","borderDash","borderDashOffset","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBorderWidth","pointRadius","x","options","maintainAspectRatio","legend","display","tooltips","backgroundColor","titleFontColor","bodyFontColor","bodySpacing","xPadding","mode","intersect","position","responsive","scales","yAxes","barPercentage","gridLines","drawBorder","color","zeroLineColor","ticks","suggestedMin","suggestedMax","fontColor","stepSize","xAxes","CardFooter","Button","onClick","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,kC,iMCkI5BC,MAtGf,WACE,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,8CAKJ,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CACEC,GAAK,cACLC,KAAQ,CACNC,SAAU,CAAC,CACTC,MAAO,OACPC,MAAM,EACNC,UAAU,EACVC,YAAa,EACbC,YAAa,UACbC,YAAa,EACbC,WAAY,GACZC,iBAAkB,EAClBC,qBAAsB,UACtBC,iBAAkB,sBAClBC,0BAA2B,UAC3BC,iBAAkB,GAClBC,iBAAkB,EAClBC,sBAAuB,GACvBC,YAAa,EACbhB,KAAM,CAAC,aAACiB,EAAG,GAAL,IAAW,OAGrBC,QAAW,CACTC,qBAAqB,EACrBC,OAAQ,CACNC,SAAS,GAEXC,SAAU,CACRC,gBAAiB,UACjBC,eAAgB,OAChBC,cAAe,OACfC,YAAa,EACbC,SAAU,GACVC,KAAM,UACNC,UAAW,EACXC,SAAU,WAEZC,YAAY,EACZC,OAAQ,CACNC,MAAO,CACL,CACEC,cAAe,IACfC,UAAW,CACTC,YAAY,EACZC,MAAO,uBACPC,cAAe,eAEjBC,MAAO,CACLC,cAAe,EACfC,aAAc,EACdpB,SAAS,EACTqB,UAAW,UACXC,SAAU,KAIhBC,MAAO,CACL,CACEV,cAAe,IACfC,UAAW,CACTd,SAAS,EACTe,YAAY,EACZC,MAAO,uBACPC,cAAe,eAEjBC,MAAO,CACLC,cAAe,EACfC,aAAc,EACdpB,SAAS,EACTqB,UAAW,UACXC,SAAU,UAQxB,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,gCAAhB,gBADF,0BAOF,4BAAQC,KAAK,UAAb,yFCjHcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.560134e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Line, Bar, Scatter } from \"react-chartjs-2\";\nimport logo from './logo.svg';\nimport './App.css';\n\n// reactstrap components\nimport {\n  Button,\n  ButtonGroup,\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  CardText,\n  CardTitle,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  Label,\n  FormGroup,\n  Input,\n  Table,\n  Row,\n  Col,\n  UncontrolledTooltip\n} from \"reactstrap\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Card>\n        <CardHeader>\n          <CardTitle>\n            <h3>\n              Beam-pattern\n            </h3>\n          </CardTitle>\n        </CardHeader>\n        <CardBody>\n          <Scatter\n            id = \"scatter-rel\"\n            data = {{\n              datasets: [{\n                label: \"sinc\",\n                fill: true,\n                showLine: true,\n                lineTension: 0,\n                borderColor: \"#1f8ef1\",\n                borderWidth: 2,\n                borderDash: [],\n                borderDashOffset: 0.0,\n                pointBackgroundColor: \"#1f8ef1\",\n                pointBorderColor: \"rgba(255,255,255,0)\",\n                pointHoverBackgroundColor: \"#1f8ef1\",\n                pointBorderWidth: 20,\n                pointHoverRadius: 4,\n                pointHoverBorderWidth: 15,\n                pointRadius: 4,\n                data: [{x: 0, x: 0}],\n              }]\n            }}\n            options = {{\n              maintainAspectRatio: false,\n              legend: {\n                display: true\n              },\n              tooltips: {\n                backgroundColor: \"#f5f5f5\",\n                titleFontColor: \"#333\",\n                bodyFontColor: \"#666\",\n                bodySpacing: 4,\n                xPadding: 12,\n                mode: \"nearest\",\n                intersect: 0,\n                position: \"nearest\",\n              },\n              responsive: true,\n              scales: {\n                yAxes: [\n                  {\n                    barPercentage: 1.6,\n                    gridLines: {\n                      drawBorder: false,\n                      color: \"rgba(29,140,248,0.0)\",\n                      zeroLineColor: \"transparent\"\n                    },\n                    ticks: {\n                      suggestedMin: -1,\n                      suggestedMax: 1,\n                      display: false,\n                      fontColor: \"#9a9a9a\",\n                      stepSize: 1\n                    }\n                  }\n                ],\n                xAxes: [\n                  {\n                    barPercentage: 1.6,\n                    gridLines: {\n                      display: false,\n                      drawBorder: false,\n                      color: \"rgba(29,140,248,0.1)\",\n                      zeroLineColor: \"transparent\"\n                    },\n                    ticks: {\n                      suggestedMin: -1,\n                      suggestedMax: 1,\n                      display: false,\n                      fontColor: \"#9a9a9a\",\n                      stepSize: 1\n                    }\n                  }\n                ]\n              }\n            }}\n          />\n        </CardBody>\n        <CardFooter>\n          <Button onClick=\"window.python.set_width(0.5)\">\n            Width of 0.5\n          </Button>\n          Controls will go here\n        </CardFooter>\n      </Card>\n      <script type=\"module\">import * as python from './__target__/python_functions.js'; window.python = python;</script>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}