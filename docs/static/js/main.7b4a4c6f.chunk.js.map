{"version":3,"sources":["logo.svg","beampatterns.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","expi","x","exp","complex","AntennaArray","n_antennas","lambda_ratio","this","antenna_index","range","bp","ang","steering_vector","multiply","map","element","dotMultiply","width","subtract","pi","item","Math","abs","ang_2","curr_term","output","ii","sin","sinc","ang_domain_rel","exp_index","response_domain_rel","App","props","state","center","circle","cos","y","toArray","antenna","set_ang_domaing_rel","bp_sinc","bp_steer","rad","array_response_rel","rr","r_max","max","beampattern","cc","className","Row","Col","lg","Card","CardHeader","CardTitle","CardBody","height","id","data","datasets","label","fill","showLine","lineTension","backgroundColor","borderColor","borderWidth","borderDash","borderDashOffset","pointRadius","rat","point","options","legend","display","tooltips","enabled","responsive","maintainAspectRatio","aspectRatio","scales","yAxes","barPercentage","gridLines","drawBorder","color","zeroLineColor","ticks","min","fontColor","stepSize","xAxes","CardFooter","Button","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7b4a4c6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {range, exp, complex, subtract, multiply, dotMultiply, pi, zeros} from \"mathjs\"\r\n\r\nfunction sinc(ang){\r\n  ang *= pi\r\n  if (Math.abs(ang) < 0.5) {\r\n    // Taylor seris: 1-x^2/3!+x^4/5!-x^6/7!...\r\n    const ang_2 = ang**2;                // x^2\r\n    var curr_term = 1;                   // current term\r\n    var output = 1;                      // the Taylor series result\r\n    for (var ii = 2; ii < 12; ii += 2) {\r\n      curr_term *= -ang_2/(ii*(ii+1))\r\n      output += curr_term\r\n    }\r\n    return output\r\n  } else {\r\n    return Math.sin(ang)/ang\r\n  }\r\n}\r\n\r\nfunction expi(x){\r\n  return(exp(complex(0, x)))\r\n}\r\n\r\nclass AntennaArray{\r\n  constructor(n_antennas, lambda_ratio){\r\n    this.n_antennas = n_antennas;\r\n    this.lambda_ratio = lambda_ratio;\r\n    this.antenna_index = range(0, n_antennas)\r\n  }\r\n  bp_steer(bp, ang){\r\n    const steering_vector = multiply(this.antenna_index, ang).map(element => expi(element));\r\n    return(dotMultiply(bp, steering_vector));\r\n  }\r\n  bp_sinc(width){\r\n    const sinc_index = multiply(subtract(this.antenna_index, (this.n_antennas-1)/2), width/(2*pi))\r\n    return(sinc_index.map(item => sinc(item)))\r\n  }\r\n  set_ang_domaing_rel(x){\r\n    this.ang_domain_rel = x;\r\n    const exp_index = x.map(item => multiply(this.antenna_index, item))\r\n    this.response_domain_rel = exp_index.map(item => expi(item))\r\n  }\r\n  array_response_rel(bp){\r\n    return(multiply(this.response_domain_rel, bp))\r\n  }\r\n}\r\n\r\nexport default AntennaArray\r\n","import React from 'react';\nimport { Line, Bar, Scatter } from 'react-chartjs-2';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {abs, range, pi, max} from 'mathjs'\nimport AntennaArray from './beampatterns.js'\n\n// reactstrap components\nimport {\n  Button,\n  ButtonGroup,\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  CardText,\n  CardTitle,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  Label,\n  FormGroup,\n  Input,\n  Table,\n  Row,\n  Col,\n  UncontrolledTooltip\n} from \"reactstrap\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      center: 0,\n      width: pi,\n    };\n    const ang_domain_rel = range(-pi, pi, 0.01)\n    this.circle = ang_domain_rel.map(ang => {return({x: Math.cos(ang), y: Math.sin(ang)})}).toArray()\n    this.antenna = new AntennaArray(16, 0.5);\n    this.antenna.set_ang_domaing_rel(ang_domain_rel)\n  }\n  render() {\n    var bp = this.antenna.bp_sinc(this.state.width);\n    bp = this.antenna.bp_steer(bp, this.state.center);\n    var rad = this.antenna.array_response_rel(bp).map(rr => abs(rr)**2).toArray();\n    const r_max = max(rad)\n    const beampattern = this.circle.map((cc, ii) => {\n      return({\n      x: cc.x*rad[ii]/r_max,\n      y: cc.y*rad[ii]/r_max,\n    })})\n    return (\n      <div className=\"App\">\n        <Row>\n          <Col lg=\"3\">\n          </Col>\n          <Col lg=\"3\">\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  <h3>\n                    Beam-pattern\n                  </h3>\n                </CardTitle>\n              </CardHeader>\n              <CardBody>\n                <Scatter\n                  height={null}\n                  width={null}\n                  id = \"scatter-rel\"\n                  data = {{\n                    datasets: [\n                    {\n                      label: \"sinc\",\n                      fill: true,\n                      showLine: true,\n                      lineTension: 0,\n                      backgroundColor: \"rgba(0, 0, 255, 0.1)\",\n                      borderColor: \"#1f8ef1\",\n                      borderWidth: 5,\n                      borderDash: [],\n                      borderDashOffset: 0.0,\n                      //pointBackgroundColor: \"#1f8ef1\",\n                      //pointBorderColor: \"rgba(255,255,255,0)\",\n                      //pointHoverBackgroundColor: \"#1f8ef1\",\n                      //pointBorderWidth: 20,\n                      //pointHoverRadius: 4,\n                      //pointHoverBorderWidth: 15,\n                      pointRadius: 0,//4,\n                      data: beampattern,\n                    },\n                    {\n                      label: \"sinc\",\n                      fill: true,\n                      showLine: true,\n                      lineTension: 0,\n                      borderColor: \"#000000\",\n                      borderWidth: 1,\n                      borderDash: [],\n                      borderDashOffset: 0.0,\n                      //pointBackgroundColor: \"#1f8ef1\",\n                      //pointBorderColor: \"rgba(255,255,255,0)\",\n                      //pointHoverBackgroundColor: \"#1f8ef1\",\n                      //pointBorderWidth: 20,\n                      //pointHoverRadius: 4,\n                      //pointHoverBorderWidth: 15,\n                      pointRadius: 0,//4,\n                      data: this.circle,\n                    }, ...[0.25, 0.5, 0.75].map(rat => {return(\n                      {\n                        label: \"sinc\",\n                        fill: false,\n                        showLine: true,\n                        lineTension: 0,\n                        borderColor: \"#000000\",\n                        borderWidth: 1,\n                        borderDash: [],\n                        borderDashOffset: 0.0,\n                        //pointBackgroundColor: \"#1f8ef1\",\n                        //pointBorderColor: \"rgba(255,255,255,0)\",\n                        //pointHoverBackgroundColor: \"#1f8ef1\",\n                        //pointBorderWidth: 20,\n                        //pointHoverRadius: 4,\n                        //pointHoverBorderWidth: 15,\n                        pointRadius: 0,//4,\n                        data: this.circle.map(point => {return({x: rat*point.x, y: rat*point.y})}),\n                      }\n                    )}),\n                  ]\n                  }}\n                  options = {{\n                    legend: {\n                      display: false\n                    },\n                    tooltips: {\n                      enabled: false,\n                    },\n                    responsive: true,\n                    maintainAspectRatio: true,\n                    aspectRatio: 1,\n                    scales: {\n                      yAxes: [\n                        {\n                          barPercentage: 1.6,\n                          gridLines: {\n                            display: true,\n                            drawBorder: false,\n                            color: \"rgba(29,140,248,0.0)\",\n                            zeroLineColor: \"transparent\"\n                          },\n                          ticks: {\n                            min: -1.2,\n                            max: 1.2,\n                            fontColor: \"#9a9a9a\",\n                            stepSize: 1\n                          }\n                        }\n                      ],\n                      xAxes: [\n                        {\n                          barPercentage: 1.6,\n                          gridLines: {\n                            display: true,\n                            drawBorder: false,\n                            color: \"rgba(29,140,248,0.1)\",\n                            zeroLineColor: \"transparent\"\n                          },\n                          ticks: {\n                            min: -1.2,\n                            max: 1.2,\n                            fontColor: \"#9a9a9a\",\n                            stepSize: 1\n                          }\n                        }\n                      ]\n                    }\n                  }}\n                />\n              </CardBody>\n              <CardFooter>\n                <Button>\n                  Width of 0.5\n                </Button>\n                Controls will go here\n              </CardFooter>\n            </Card>\n          </Col>\n          <Col lg=\"3\">\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  <h3>\n                    Beam-pattern\n                  </h3>\n                </CardTitle>\n              </CardHeader>\n              <CardBody>\n                <Scatter\n                  height={null}\n                  width={null}\n                  id = \"scatter-rel\"\n                  data = {{\n                    datasets: [{\n                      label: \"sinc\",\n                      fill: true,\n                      showLine: true,\n                      lineTension: 0,\n                      borderColor: \"#1f8ef1\",\n                      borderWidth: 5,\n                      borderDash: [],\n                      borderDashOffset: 0.0,\n                      //pointBackgroundColor: \"#1f8ef1\",\n                      //pointBorderColor: \"rgba(255,255,255,0)\",\n                      //pointHoverBackgroundColor: \"#1f8ef1\",\n                      //pointBorderWidth: 20,\n                      //pointHoverRadius: 4,\n                      //pointHoverBorderWidth: 15,\n                      pointRadius: 0,//4,\n                      data: beampattern,\n                    },{\n                      label: \"sinc\",\n                      fill: true,\n                      showLine: true,\n                      lineTension: 0,\n                      borderColor: \"#1f8ef1\",\n                      borderWidth: 5,\n                      borderDash: [],\n                      borderDashOffset: 0.0,\n                      //pointBackgroundColor: \"#1f8ef1\",\n                      //pointBorderColor: \"rgba(255,255,255,0)\",\n                      //pointHoverBackgroundColor: \"#1f8ef1\",\n                      //pointBorderWidth: 20,\n                      //pointHoverRadius: 4,\n                      //pointHoverBorderWidth: 15,\n                      pointRadius: 0,//4,\n                      data: this.circle,\n                    }\n                  ]\n                  }}\n                  options = {{\n                    legend: {\n                      display: false\n                    },\n                    tooltips: {\n                      enabled: false,\n                    },\n                    responsive: true,\n                    maintainAspectRatio: true,\n                    aspectRatio: 1,\n                    scales: {\n                      yAxes: [\n                        {\n                          barPercentage: 1.6,\n                          gridLines: {\n                            display: true,\n                            drawBorder: false,\n                            color: \"rgba(29,140,248,0.0)\",\n                            zeroLineColor: \"transparent\"\n                          },\n                          ticks: {\n                            min: -1.2,\n                            max: 1.2,\n                            fontColor: \"#9a9a9a\",\n                            stepSize: 1\n                          }\n                        }\n                      ],\n                      xAxes: [\n                        {\n                          barPercentage: 1.6,\n                          gridLines: {\n                            display: true,\n                            drawBorder: false,\n                            color: \"rgba(29,140,248,0.1)\",\n                            zeroLineColor: \"transparent\"\n                          },\n                          ticks: {\n                            min: -1.2,\n                            max: 1.2,\n                            fontColor: \"#9a9a9a\",\n                            stepSize: 1\n                          }\n                        }\n                      ]\n                    }\n                  }}\n                />\n              </CardBody>\n              <CardFooter>\n                <Button>\n                  Width of 0.5\n                </Button>\n                Controls will go here\n              </CardFooter>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"./assets/scss/black-dashboard-react.scss\";\nimport \"./assets/demo/demo.css\";\nimport \"./assets/css/nucleo-icons.css\";\n//document.body.classList.add(\"white-content\");\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}